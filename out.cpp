// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/Pass.h>
#include <llvm/PassManager.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/IR/BasicBlock.h>
#include <llvm/IR/CallingConv.h>
#include <llvm/IR/Constants.h>
#include <llvm/IR/DerivedTypes.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/GlobalVariable.h>
#include <llvm/IR/IRPrintingPasses.h>
#include <llvm/IR/InlineAsm.h>
#include <llvm/IR/Instructions.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/Module.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("back.ll", getGlobalContext());
 mod->setDataLayout("0x175c6c0");
 mod->setTargetTriple("x86_64-unknown-linux-gnu");

 // Type Definitions
 std::vector<Type*>FuncTy_0_args;
 FunctionType* FuncTy_0 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_0_args,
  /*isVarArg=*/false);

 PointerType* PointerTy_1 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);

 PointerType* PointerTy_2 = PointerType::get(PointerTy_1, 0);


 // Function Declarations

 Function* func_main = mod->getFunction("main");
 if (!func_main) {
 func_main = Function::Create(
  /*Type=*/FuncTy_0,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"main", mod);
 func_main->setCallingConv(CallingConv::C);
 }
 AttributeSet func_main_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }

  Attrs.push_back(PAS);
  func_main_PAL = AttributeSet::get(mod->getContext(), Attrs);

 }
 func_main->setAttributes(func_main_PAL);

 // Global Variable Declarations


 // Constant Definitions
 ConstantInt* const_int32_3 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
 ConstantInt* const_int32_4 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
 ConstantInt* const_int32_5 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("5"), 10));

 // Global Variable Definitions

 // Function Definitions

 // Function: main (func_main)
 {

  BasicBlock* label_6 = BasicBlock::Create(mod->getContext(), "",func_main,0);

  // Block  (label_6)
  AllocaInst* ptr_7 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "", label_6);
  ptr_7->setAlignment(4);
  AllocaInst* ptr_x = new AllocaInst(IntegerType::get(mod->getContext(), 32), "x", label_6);
  ptr_x->setAlignment(4);
  AllocaInst* ptr_y = new AllocaInst(PointerTy_1, "y", label_6);
  ptr_y->setAlignment(8);
  StoreInst* void_8 = new StoreInst(const_int32_4, ptr_7, false, label_6);
  StoreInst* void_9 = new StoreInst(const_int32_5, ptr_x, false, label_6);
  void_9->setAlignment(4);
  StoreInst* void_10 = new StoreInst(ptr_x, ptr_y, false, label_6);
  void_10->setAlignment(8);
  ReturnInst::Create(mod->getContext(), const_int32_4, label_6);

 }

 return mod;
}
